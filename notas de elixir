# • Cargar en la terminal el Shell (iex)
"""
C:\>iex
Interactive Elixir (1.10.4) - press Ctrl+C to exit (type h() ENTER for he
lp)
iex()>
"""

# • Se pueden realizar expresiones que se evaluarán al presionar
"""
iex()> 5 + 4<enter>
9
iex()> 5 +<enter>
...()> 4<enter>
9<enter>
"""

# • Se pueden escribir múltiples expresiones, retornando siempre el último valor
"""
calculado
iex()> 5+4;5+1
6
# • Utilizar valores calculados anteriores en el shell
iex(1)> 5 + 4
9
iex(2)> v 1
9
iex(3)> v(1)
9
iex(4)> v(1) + 11
20
iex(5)> v(4)
20
"""

# • Cuando nos equivocamos en una expresión y no permite continuar el shell
"""
iex(1)> (5+4
...(1)>
...(1)> sd
...(1)> as
iex(1)> #iex:break
iex(1)>
"""

# • para salir del Shell se puede mediante CTRL+C o escribiendo System.halt
"""
iex()> System.halt
C:\>
"""

# Cristian Larios
# • Para pedir ayuda del Shell
"""
iex()> h
* IEx.Helpers
Welcome to Interactive Elixir. You are currently
seeing the documentation for the module `IEx.Helpers`
which provides many helpers to make Elixir's shell
more joyful to work with.
.
.
.
 * `b/1` - prints callbacks info and docs for a given module
 * `c/1` - compiles a file
 * `c/2` - compiles a file and writes bytecode to the given p
ath
.
.
.
To learn more about IEx as a whole, type `h(IEx)`.
"""

# • Para ver la ayuda específica de alguna opción (macro) se puede indicar como h
# opción, o h(opción)
"""
iex()> h b
* defmacro b(term)
"""
# Prints the documentation for the given callback function.
# It also accepts single module argument to list
# all available behaviour callbacks.
## Examples
"""
 iex> b(Mix.Task.run/1)
 iex> b(Mix.Task.run)
 iex> b(GenServer)
iex()> h(b)
* defmacro b(term)
"""

# Prints the documentation for the given callback function.
# It also accepts single module argument to list
# all available behaviour callbacks.
## Examples
 """
 iex> b(Mix.Task.run/1)
 iex> b(Mix.Task.ru
 """

# • Inmutabilidad
# – Los datos en Elixir son inmutables: su contenido no puede cambiarse.
# – Las variables pueden ser refijadas (rebound) a un diferente valor
"""
iex()> dia_semana = 5 <se establece el valor inicial>
5
iex()> dia_semana <verificación>
5 <>
iex()> dia_semana = 7 <se refija el valor inicial>
7 <>
iex()> dia_semana <se verifica el efecto de la refijación>
7 <>
"""